#include <stdio.h>

// Function for binary search
int binarySearch(int arr[], int n, int target) {
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == target)
            return mid; // Element found, return index
        else if (arr[mid] < target)
            low = mid + 1; // Search in right half
        else
            high = mid - 1; // Search in left half
    }

    return -1; // Element not found
}

int main() {
    int arr[] = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};
    int n = sizeof(arr) / sizeof(arr[0]); // Size of the array
    int target = 23;

    int result = binarySearch(arr, n, target);

    if (result != -1)
        printf("Element found at index %d\n", result);
    else
        printf("Element not found\n");

    return 0;
}

Q2>
#include <stdio.h>
#include <math.h>

// Function for Jump Search
int jumpSearch(int arr[], int n, int target) {
    int step = sqrt(n); // Finding block size
    int prev = 0;

    // Jump ahead in steps until we find a block containing the target
    while (arr[(step < n ? step : n) - 1] < target) {
        prev = step;
        step += sqrt(n);
        if (prev >= n) // If out of bounds
            return -1;
    }

    // Perform linear search in the identified block
    while (arr[prev] < target) {
        prev++;
        if (prev == (step < n ? step : n)) // If we reach the next block or end
            return -1;
    }

    // If element found
    if (arr[prev] == target)
        return prev;
    
    return -1; // Element not found
}

int main() {
    int arr[] = {2, 5, 8, 12, 16, 23, 38, 56, 72, 91};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 23;

    int result = jumpSearch(arr, n, target);

    if (result != -1)
        printf("Element found at index %d\n", result);
    else
        printf("Element not found\n");

    return 0;
}
