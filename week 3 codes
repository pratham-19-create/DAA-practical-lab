#include <stdio.h>

// Function to perform insertion sort and count comparisons & shifts
void insertionSort(int arr[], int n) {
    int comparisons = 0, shifts = 0;

    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;

        // Compare and shift elements
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];  // Shift
            j--;
            comparisons++; // Every comparison inside while loop
            shifts++;      // Every shift operation
        }
        arr[j + 1] = key;
        shifts++; // For placing key in its position

        // If no shifting happened, still count comparison
        if (j >= 0)
            comparisons++;
    }

    printf("Sorted Array: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\nTotal Comparisons: %d\nTotal Shifts: %d\n", comparisons, shifts);
}

// Driver function
int main() {
    int arr[] = {9, 5, 1, 4, 3};
    int n = sizeof(arr) / sizeof(arr[0]);

    insertionSort(arr, n);
    
    return 0;
}
Q2>
#include <stdio.h>

// Function to perform selection sort and count comparisons & swaps
void selectionSort(int arr[], int n) {
    int comparisons = 0, swaps = 0;

    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        
        // Find the minimum element in the unsorted part
        for (int j = i + 1; j < n; j++) {
            comparisons++;  // Count each comparison
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // Swap if the minimum is not already in place
        if (minIndex != i) {
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
            swaps++;  // Count each swap
        }
    }

    // Print sorted array
    printf("Sorted Array: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\nTotal Comparisons: %d\nTotal Swaps: %d\n", comparisons, swaps);
}

// Driver function
int main() {
    int arr[] = {9, 5, 1, 4, 3};
    int n = sizeof(arr) / sizeof(arr[0]);

    selectionSort(arr, n);
    
    return 0;
}
